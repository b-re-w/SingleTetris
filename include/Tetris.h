#pragma once

#include "../Main.h"

#ifndef TETRIS_H
    #define TETRIS_H

    #define LEFT 75  // 왼쪽
    #define RIGHT 77  // 오른쪽
    #define UP 72  // 위쪽(방향++)
    #define DOWN 80  // 아래쪽
    #define SPACE 32  // 떨어트리기

    #define RESET 1  // buildBoard 함수의 테트리스 판 배열 초기화 옵션
    #define NORESET 0  // buildBoard 함수의 테트리스 판 배열 초기화 안함 옵션

    static int const ttshape[SHAPENUM][SHAPEDIR][4][4] = {
    // 1차원 : 도형의 모양 // 2차원 : 도형의 방향
    // 3차원 : 도형의 y축  // 4차원 : 도형의 x축
    { /* 도형 0 : 일자 모양 */
        {  /* 방위 0 */
        {0, 5, 0, 0}, // ┃
        {0, 5, 0, 0}, // ┃
        {0, 5, 0, 0}, // ┃
        {0, 5, 0, 0}  // ┃
        }, /* 방위 1 */ {
        {0, 0, 0, 0}, //
        {0, 0, 0, 0}, //
        {4, 5, 6, 7}, // ━ ━ ━ ━
        {0, 0, 0, 0}  //
        }, /* 방위 2 */ {
        {0, 0, 6, 0}, // ┃
        {0, 0, 6, 0}, // ┃
        {0, 0, 6, 0}, // ┃
        {0, 0, 6, 0}  // ┃
        }, /* 방위 3 */ {
        {0, 0, 0, 0}, //
        {4, 5, 6, 7}, // ━ ━ ━ ━
        {0, 0, 0, 0}, //
        {0, 0, 0, 0}  //
        }},
    { /* 도형 1 : 네모 모양 */
        {  /* 방위 0 */
        {0, 0, 0, 0}, //
        {0, 5, 6, 0}, // ┏ ┓
        {0, 5, 6, 0}, // ┗ ┛
        {0, 0, 0, 0}  //
        }, /* 방위 1 */ {
        {0, 0, 0, 0}, //
        {0, 5, 6, 0}, // ┏ ┓
        {0, 5, 6, 0}, // ┗ ┛
        {0, 0, 0, 0}  //
        }, /* 방위 2 */ {
        {0, 0, 0, 0}, //
        {0, 5, 6, 0}, // ┏ ┓
        {0, 5, 6, 0}, // ┗ ┛
        {0, 0, 0, 0}  //
        }, /* 방위 3 */ {
        {0, 0, 0, 0}, //
        {0, 5, 6, 0}, // ┏ ┓
        {0, 5, 6, 0}, // ┗ ┛
        {0, 0, 0, 0}  //
        }},
    { /* 도형 2 : L 모양 */
        {  /* 방위 0 */
        {0, 0, 0, 0}, //
        {0, 5, 0, 0}, // ┃
        {0, 5, 0, 0}, // ┃
        {0, 5, 6, 0}  // ┗ ━
        }, /* 방위 1 */ {
        {0, 0, 0, 0}, //
        {0, 0, 0, 7}, //     ┃
        {0, 5, 6, 7}, // ━ ━ ┛
        {0, 0, 0, 0}  //
        }, /* 방위 2 */ {
        {0, 0, 0, 0}, //
        {0, 5, 6, 0}, // ━ ┓
        {0, 0, 6, 0}, //   ┃
        {0, 0, 6, 0}  //   ┃
        }, /* 방위 3 */ {
        {0, 0, 0, 0}, //
        {0, 5, 6, 7}, // ┏ ━ ━
        {0, 5, 0, 0}, // ┃
        {0, 0, 0, 0}  //
        }},
    { /* 도형 3 : 번개 모양 */
        {  /* 방위 0 */
        {0, 0, 0, 0}, //
        {0, 5, 0, 0}, // ┃
        {0, 5, 6, 0}, // ┗ ┓
        {0, 0, 6, 0}  //   ┃
        }, /* 방위 1 */ {
        {0, 0, 0, 0}, //
        {0, 0, 6, 7}, //   ┏ ━
        {0, 5, 6, 0}, // ━ ┛
        {0, 0, 0, 0}  //
        }, /* 방위 2 */ {
        {0, 0, 0, 0}, //
        {0, 5, 0, 0}, // ┃
        {0, 5, 6, 0}, // ┗ ┓
        {0, 0, 6, 0}  //   ┃
        }, /* 방위 3 */ {
        {0, 0, 0, 0}, //
        {0, 0, 6, 7}, //   ┏ ━
        {0, 5, 6, 0}, // ━ ┛
        {0, 0, 0, 0}  //
        }},
    { /* 도형 4 : 방향키 모양 */
        {  /* 방위 0 */
        {0, 0, 0, 0}, //
        {0, 0, 6, 0}, //   ┃
        {0, 5, 6, 7}, // ━ ┻ ━
        {0, 0, 0, 0}  //
        }, /* 방위 1 */ {
        {0, 0, 6, 0}, //   ┃
        {0, 5, 6, 0}, // ━ ┫
        {0, 0, 6, 0}, //   ┃
        {0, 0, 0, 0}  //
        }, /* 방위 2 */ {
        {0, 0, 0, 0}, //
        {0, 5, 6, 7}, // ━ ┳ ━
        {0, 0, 6, 0}, //   ┃
        {0, 0, 0, 0}  //
        }, /* 방위 3 */ {
        {0, 5, 0, 0}, // ┃
        {0, 5, 6, 0}, // ┣ ━
        {0, 5, 0, 0}, // ┃
        {0, 0, 0, 0}  //
        }},
    { /* 도형 5 : 십자 모양 */
        {  /* 방위 0 */
        {0, 0, 0, 0}, //
        {0, 0, 6, 0}, //   ┃
        {0, 5, 6, 7}, // ━ ╋ ━
        {0, 0, 6, 0}  //   ┃
        }, /* 방위 1 */ {
        {0, 0, 0, 0}, //
        {0, 0, 6, 0}, //   ┃
        {0, 5, 6, 7}, // ━ ╋ ━
        {0, 0, 6, 0}  //   ┃
        }, /* 방위 2 */ {
        {0, 0, 0, 0},
        {0, 0, 6, 0}, //   ┃
        {0, 5, 6, 7}, // ━ ╋ ━
        {0, 0, 6, 0}  //   ┃
        }, /* 방위 3 */ {
        {0, 0, 0, 0},
        {0, 0, 6, 0}, //   ┃
        {0, 5, 6, 7}, // ━ ╋ ━
        {0, 0, 6, 0}  //   ┃
        }}
    };  // 테트리스 도형 모형 저장용 배열

    struct object_info {
        int color;  // 테트리스 도형의 색상
        int shape;  // 테트리스 도형의 모양
        int dir;  // 테트리스 도형의 방향
        int y;  // 테트리스 도형 배열의 가장 아래쪽이 출력되는 y좌표
        int x;  // 왼쪽(-) 또는 오른쪽(+)으로 이동된 정도
    };  // 객체 정보 저장용 구조체
#endif

void showStart(int count);  // 게임 시작 화면 표시 함수 - 전달인수로 몇초동안 대기할 것인지를 받음
void contructWall(_Bool (* struct_board)[XSIZ]);  // 테트리스 벽 생성 함수
void getNewShape(struct object_info * objstat);  // 랜덤으로 테트리스 도형을 지정해주는 함수
void buildBoard(_Bool (* object_board)[XSIZ], struct object_info * objstat, _Bool const reset);  // 테트리스 게임판을 생성해주는 함수
_Bool letObjMove(_Bool (* struct_board)[XSIZ], struct object_info * objstat, int const where_to_move);  // 테트리스 도형을 이동시켜주는 함수, 벽에 닿을 시 1 리턴
_Bool checkCrash(_Bool const (* struct_board)[XSIZ], _Bool const (* object_board)[XSIZ]);  // 벽 충돌 검사 함수, 충돌 시 1 리턴
void printGameBoard(_Bool const (* struct_board)[XSIZ], struct object_info * objstat, int const ylimit);  // 게임 출력 함수
void checkLineFull(_Bool (* struct_board)[XSIZ]);  // 한줄 완성 확인 및 삭제 함수
_Bool checkGameOver(_Bool const (* struct_board)[XSIZ], int const ylimit);  // 게임 오버 확인 함수, 게임 오버 시 1 리턴
void showTetrisResult(char const * argv0);  // 결과 표시 및 재시작 여부 확인 함수
